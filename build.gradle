/**
Template file for classes using GradleRIO
@author Jaci
*/

buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '1.1.6'			//Change this line if you wish to Update GradleRIO
  }
}

apply plugin: 'GradleRIO'                                 //Apply the GradleRIO plugin
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: BuildGradle
apply plugin: 'maven'

gradlerio.robotClass = "jaci.openrio.toast.core.Toast"    //The class for the main Robot Class. Used in manifest
gradlerio.team = "5333"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//gradlerio.rioIP = "10.53.33.20"                         //Uncomment to specify the IP address of the RIO

repositories {
  maven {
    name = "Jaci"
    url = "http://dev.imjac.in/maven"
  }
  mavenCentral()
}


def maven = true

try {
  ext.mavenProps = file "../maven.properties"
  mavenProps.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.mavenProps = new ConfigSlurper().parse prop
  }
} catch (Exception e) {
  println "Could not load Maven Properties... You are not a developer!"
  maven = false
}

ext.settings = file "build.settings"
settings.withReader {
  def prop = new Properties()
  prop.load(it)
  project.ext.settings = new ConfigSlurper().parse prop
}

configurations {
    deployerJars
}

dependencies {
  compile fileTree(dir: 'libs/', include: '*.jar')

  compile 'jaci.openrio.delegate:NetworkDelegate:1.2.0'
  compile 'org.codehaus.groovy:groovy:2.4.1'
  deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

archivesBaseName = "Toast"
version = settings.toast.version
group = "jaci.openrio.toast"

def robotManifest = {
  //attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Main-Class': 'jaci.openrio.toast.core.ToastBootstrap'
  attributes 'Robot-Class': gradlerio.robotClass
}

jar.doFirst {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task generateExternalPatches(type: GradleBuild) {
  dir = 'patches'
  tasks = ['build', 'genPatches']
}

task genPatches << {
  try {
    ant.copy(todir: "build/resources/main/assets/toast/patches/") {
      ant.fileset(dir: "patches/build/patches")
    }
  } catch (Exception e) {}
}

task deletePatches << {
  try {
    ant.delete(includeemptydirs: "true") {
      ant.fileset(dir: "build/resources/main/assets/toast/patches/") {
        ant.include(name: "**/*")
        ant.exclude(name: "patches.txt")
      }
    }
  } catch (Exception e) {}
}

task genVersion << {
  try {
    new File("src/main/resources/assets/toast/toast.version").withWriter {
      it.writeLine(settings.toast.version)
    }
  } catch (Exception e) {
  }
}

task updateLatest << {
  ant.delete(dir: "build/latest/")
  ant.copy(file: "${jar.archivePath}", todir: "build/latest")
}

task externalWPI_impl(type: GradleBuild) {
  dir = '../WPILib/Open-WPI'
  tasks = ['extractWPI']
}

task externalWPI << {
  if (new File("../WPILib/Open-WPI").exists()) {
    externalWPI_impl.execute()
  }
}

genPatches.dependsOn deletePatches
compileJava.dependsOn genPatches
compileJava.dependsOn genVersion
build.finalizedBy updateLatest
wpi.finalizedBy externalWPI

task src(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from(zipTree("${System.getProperty("user.home")}/wpilib/java/extracted/library/lib/WPILib-sources.jar"))
  from(zipTree("${System.getProperty("user.home")}/wpilib/java/extracted/library/lib/NetworkTables-sources.jar"))
}

task raw(type: Jar, dependsOn: classes) {
  classifier = 'raw'
  from sourceSets.main.output
}

artifacts {
  //archives genJavadoc
  archives raw
  archives src
}
uploadArchives {
  if (maven) {
    repositories.mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenProps.jaci.url) {
        authentication(userName: mavenProps.jaci.user, password: mavenProps.jaci.auth)
      }

      pom {
	      groupId = project.group
		  version = project.version
		  artifactId = project.archivesBaseName
		  project {
			  name project.archivesBaseName
			  packaging 'jar'
			  description 'Toast API Module Loader '
		  }
      }
    }
  }
}

class BuildGradle implements Plugin<Project> {
  void apply(Project project) {
    project.task('release', dependsOn: 'build') << {
      ant.zip(destfile: "releases/Toast-${project.version}.zip",
        basedir: "release")
  	  try {
  		    ant.delete(dir: "build/runnable")
  	  } catch (Exception e) {}
  	  ant.copy(tofile: "build/runnable/Toast.jar") {
  		    ant.fileset(dir: "build/latest/")
  	  }
  	  ant.copy(todir: "build/runnable"){
  		    ant.fileset(dir: "runnableScripts/")
  	  }
  	  ant.zip(destfile: "releases/Toast-${project.version}-RUNNABLE.zip",
  		basedir: "build/runnable")

      ant.copy(todir: "build/deployment") {
          ant.fileset(dir: "deploymentScripts")
      }
      ant.zip(destfile: "releases/Toast-Deployment-Utility.zip", basedir: "build/deployment")
    }

    project.getConfigurations().maybeCreate('verify')
    project.task('verify') << {
      File toast_dir = new File('run/verification')
      if (toast_dir.exists()) {
        project.ant.delete(dir: toast_dir.getAbsolutePath())
      }

      toast_dir.mkdirs()
      File modules_dir = new File(toast_dir, "toast/modules")
      modules_dir.mkdirs()

      println "Beginning Assets Copying..."
      File toast = new File(toast_dir, 'Toast.jar')
      String archive = project.jar.archivePath
      project.ant.copy(tofile: toast.getAbsolutePath(), file: archive)

      project.getConfigurations().verify.resolve().each {
        File file = it
        File toFile = new File(modules_dir, file.getName())
        project.ant.copy(tofile: toFile.getAbsolutePath(), file: file.getAbsolutePath())
      }

      println "Assets Copied..."
      println "Beginning Verification..."

      project.javaexec {
        workingDir = toast_dir.getAbsolutePath()
        args = ["Toast.jar", "-verify"]
        main = '-jar'
      }

      println "Verification Complete..."
    }
  }
}
