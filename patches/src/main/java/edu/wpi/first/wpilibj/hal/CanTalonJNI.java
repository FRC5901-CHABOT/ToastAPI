/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * 
 * -- F*ck the Police -- 
 * ------ OpenRIO ------
 *
 * (All comments are unused methods)
 *
 * Sidenote: This class is unnecessarily complex and is a great example of what
 * NOT to do when writing a Robotics API >:(
 *
 * Just ignoring this class will improve your quality of life
 * ----------------------------------------------------------------------------- */

package edu.wpi.first.wpilibj.hal;

import jaci.openrio.toast.core.loader.simulation.srx.SRX_Reg;
import jaci.openrio.toast.core.loader.simulation.srx.SRX_Reg.SRX_Wrapper;

import java.util.HashMap;

public class CanTalonJNI {
    public static double ltd(long l) { return Double.longBitsToDouble(l); }
    public static long dtl(double d) { return Double.doubleToLongBits(d); }

    public static HashMap<Long, Double> double_p_assoc = new HashMap<>();
    public static HashMap<Long, Integer> int_p_assoc = new HashMap<>();

    public static long new_doublep() {
        return System.nanoTime();          // lol
    }

//    public static native long copy_doublep(double jarg1);
//    public static native void delete_doublep(long jarg1);
//    public static native void doublep_assign(long jarg1, double jarg2);
    public static double doublep_value(long jarg1) {
        if (!double_p_assoc.containsKey(jarg1)) return 0;           // Saves implementation space
        return double_p_assoc.get(jarg1);
    }

    public static long new_intp() {
        return System.nanoTime();
    }

//    public static native long copy_intp(int jarg1);
//    public static native void delete_intp(long jarg1);
//    public static native void intp_assign(long jarg1, int jarg2);
    public static int intp_value(long jarg1) {
        if (!int_p_assoc.containsKey(jarg1)) return 0;              // Saves implementation space
        return int_p_assoc.get(jarg1);
    }

    //    public static native long new_uint32_tp();
//    public static native long copy_uint32_tp(long jarg1);
//    public static native void delete_uint32_tp(long jarg1);
//    public static native void uint32_tp_assign(long jarg1, long jarg2);
//    public static native long uint32_tp_value(long jarg1);
//    public static native long new_int32_tp();
//    public static native long copy_int32_tp(long jarg1);
//    public static native void delete_int32_tp(long jarg1);
//    public static native void int32_tp_assign(long jarg1, long jarg2);
//    public static native long int32_tp_value(long jarg1);
//    public static native long new_uint8_tp();
//    public static native long copy_uint8_tp(long jarg1);
//    public static native void delete_uint8_tp(long jarg1);
//    public static native void uint8_tp_assign(long jarg1, long jarg2);
//    public static native long uint8_tp_value(long jarg1);
//    public static native long new_CTR_Codep();
//    public static native long copy_CTR_Codep(long jarg1);
//    public static native void delete_CTR_Codep(long jarg1);
//    public static native void CTR_Codep_assign(long jarg1, long jarg2);
//    public static native long CTR_Codep_value(long jarg1);
//    public static native long new_floatp();
//    public static native long copy_floatp(float jarg1);
//    public static native void delete_floatp(long jarg1);
//    public static native void floatp_assign(long jarg1, float jarg2);
//    public static native float floatp_value(long jarg1);
    public static long new_CtreCanNode(long jarg1) {
        return jarg1;
    }

    public static void delete_CtreCanNode(long jarg1) { }

    public static long CtreCanNode_GetDeviceNumber(long jarg1, CtreCanNode jarg1_) {
        return jarg1;
    }

    public static int CanTalonSRX_kDefaultControlPeriodMs_get() {
        return 10;
    }

    public static long new_CanTalonSRX__SWIG_0(int dev_id, int control_period) {
        // Put if absent because otherwise multiple instances of the same device id will be reset.
        SRX_Reg.wrappers.putIfAbsent((long) dev_id, new SRX_Wrapper(dev_id, control_period));
        return dev_id;
    }

    public static long new_CanTalonSRX__SWIG_1(int dev_id) {
        int control_period = CanTalonSRX_kDefaultControlPeriodMs_get();
        return new_CanTalonSRX__SWIG_0(dev_id, control_period);
    }
//    public static native long new_CanTalonSRX__SWIG_2();
    public static void delete_CanTalonSRX(long jarg1) {
        SRX_Reg.wrappers.remove(jarg1);
    }

    public static void CanTalonSRX_Set(long id, CanTalonSRX srx_impl, double value) {
        // %Vbus
        SRX_Reg.wrappers.get(id).setVBus(value);
    }

    public static int CanTalonSRX_kMode_DutyCycle_get() {
        return 0;
    }

    public static int CanTalonSRX_kMode_PositionCloseLoop_get() {
        return 1;
    }

    public static int CanTalonSRX_kMode_VelocityCloseLoop_get() {
        return 2;
    }

    public static int CanTalonSRX_kMode_CurrentCloseLoop_get() {
        return 3;
    }

    public static int CanTalonSRX_kMode_VoltCompen_get() {
        return 4;
    }

    public static int CanTalonSRX_kMode_SlaveFollower_get() {
        return 5;
    }

    public static int CanTalonSRX_kMode_NoDrive_get() {
        return 15;
    }

    public static int CanTalonSRX_kLimitSwitchOverride_UseDefaultsFromFlash_get() {
        return 1;
    }

    public static int CanTalonSRX_kLimitSwitchOverride_DisableFwd_DisableRev_get() {
        return 4;
    }

    public static int CanTalonSRX_kLimitSwitchOverride_DisableFwd_EnableRev_get() {
        return 5;
    }

    public static int CanTalonSRX_kLimitSwitchOverride_EnableFwd_DisableRev_get() {
        return 6;
    }

    public static int CanTalonSRX_kLimitSwitchOverride_EnableFwd_EnableRev_get() {
        return 7;
    }

    public static int CanTalonSRX_kBrakeOverride_UseDefaultsFromFlash_get() {
        return 0;
    }

    public static int CanTalonSRX_kBrakeOverride_OverrideCoast_get() {
        return 1;
    }

    public static int CanTalonSRX_kBrakeOverride_OverrideBrake_get() {
        return 2;
    }

    public static int CanTalonSRX_kFeedbackDev_DigitalQuadEnc_get() {
        return 0;
    }

    public static int CanTalonSRX_kFeedbackDev_AnalogPot_get() {
        return 2;
    }

    public static int CanTalonSRX_kFeedbackDev_AnalogEncoder_get() {
        return 3;
    }

    public static int CanTalonSRX_kFeedbackDev_CountEveryRisingEdge_get() {
        return 4;
    }

    public static int CanTalonSRX_kFeedbackDev_CountEveryFallingEdge_get() {
        return 5;
    }

    public static int CanTalonSRX_kFeedbackDev_PosIsPulseWidth_get() {
        return 8;
    }

    public static int CanTalonSRX_kProfileSlotSelect_Slot0_get() {
        return 0;
    }

    public static int CanTalonSRX_kProfileSlotSelect_Slot1_get() {
        return 1;
    }

    public static int CanTalonSRX_kStatusFrame_General_get() {
        return 0;
    }

    public static int CanTalonSRX_kStatusFrame_Feedback_get() {
        return 1;
    }

    public static int CanTalonSRX_kStatusFrame_Encoder_get() {
        return 2;
    }

    public static int CanTalonSRX_kStatusFrame_AnalogTempVbat_get() {
        return 3;
    }

    public static int CanTalonSRX_eProfileParamSlot0_P_get() {
        return 1;
    }

    public static int CanTalonSRX_eProfileParamSlot0_I_get() {
        return 2;
    }

    public static int CanTalonSRX_eProfileParamSlot0_D_get() {
        return 3;
    }

    public static int CanTalonSRX_eProfileParamSlot0_F_get() {
        return 4;
    }

    public static int CanTalonSRX_eProfileParamSlot0_IZone_get() {
        return 5;
    }

    public static int CanTalonSRX_eProfileParamSlot0_CloseLoopRampRate_get() {
        return 6;
    }

    public static int CanTalonSRX_eProfileParamSlot1_P_get() {
        return 11;
    }

    public static int CanTalonSRX_eProfileParamSlot1_I_get() {
        return 12;
    }

    public static int CanTalonSRX_eProfileParamSlot1_D_get() {
        return 13;
    }

    public static int CanTalonSRX_eProfileParamSlot1_F_get() {
        return 14;
    }

    public static int CanTalonSRX_eProfileParamSlot1_IZone_get() {
        return 15;
    }

    public static int CanTalonSRX_eProfileParamSlot1_CloseLoopRampRate_get() {
        return 16;
    }

    public static int CanTalonSRX_eProfileParamSoftLimitForThreshold_get() {
        return 21;
    }

    public static int CanTalonSRX_eProfileParamSoftLimitRevThreshold_get() {
        return 22;
    }

    public static int CanTalonSRX_eProfileParamSoftLimitForEnable_get() {
        return 23;
    }

    public static int CanTalonSRX_eProfileParamSoftLimitRevEnable_get() {
        return 24;
    }

    public static int CanTalonSRX_eOnBoot_BrakeMode_get() {
        return 31;
    }

    public static int CanTalonSRX_eOnBoot_LimitSwitch_Forward_NormallyClosed_get() {
        return 32;
    }

    public static int CanTalonSRX_eOnBoot_LimitSwitch_Reverse_NormallyClosed_get() {
        return 33;
    }

    public static int CanTalonSRX_eOnBoot_LimitSwitch_Forward_Disable_get() {
        return 34;
    }

    public static int CanTalonSRX_eOnBoot_LimitSwitch_Reverse_Disable_get() {
        return 35;
    }

    public static int CanTalonSRX_eFault_OverTemp_get() {
        return 41;
    }

    public static int CanTalonSRX_eFault_UnderVoltage_get() {
        return 42;
    }

    public static int CanTalonSRX_eFault_ForLim_get() {
        return 43;
    }

    public static int CanTalonSRX_eFault_RevLim_get() {
        return 44;
    }

    public static int CanTalonSRX_eFault_HardwareFailure_get() {
        return 45;
    }

    public static int CanTalonSRX_eFault_ForSoftLim_get() {
        return 46;
    }

    public static int CanTalonSRX_eFault_RevSoftLim_get() {
        return 47;
    }

    public static int CanTalonSRX_eStckyFault_OverTemp_get() {
        return 51;
    }

    public static int CanTalonSRX_eStckyFault_UnderVoltage_get() {
        return 52;
    }

    public static int CanTalonSRX_eStckyFault_ForLim_get() {
        return 53;
    }

    public static int CanTalonSRX_eStckyFault_RevLim_get() {
        return 54;
    }

    public static int CanTalonSRX_eStckyFault_ForSoftLim_get() {
        return 55;
    }

    public static int CanTalonSRX_eStckyFault_RevSoftLim_get() {
        return 56;
    }

    public static int CanTalonSRX_eAppliedThrottle_get() {
        return 61;
    }

    public static int CanTalonSRX_eCloseLoopErr_get() {
        return 62;
    }

    public static int CanTalonSRX_eFeedbackDeviceSelect_get() {
        return 63;
    }

    public static int CanTalonSRX_eRevMotDuringCloseLoopEn_get() {
        return 64;
    }

    public static int CanTalonSRX_eModeSelect_get() {
        return 65;
    }

    public static int CanTalonSRX_eProfileSlotSelect_get() {
        return 66;
    }

    public static int CanTalonSRX_eRampThrottle_get() {
        return 67;
    }

    public static int CanTalonSRX_eRevFeedbackSensor_get() {
        return 68;
    }

    public static int CanTalonSRX_eLimitSwitchEn_get() {
        return 69;
    }

    public static int CanTalonSRX_eLimitSwitchClosedFor_get() {
        return 70;
    }

    public static int CanTalonSRX_eLimitSwitchClosedRev_get() {
        return 71;
    }

    public static int CanTalonSRX_eSensorPosition_get() {
        return 73;
    }

    public static int CanTalonSRX_eSensorVelocity_get() {
        return 74;
    }

    public static int CanTalonSRX_eCurrent_get() {
        return 75;
    }

    public static int CanTalonSRX_eBrakeIsEnabled_get() {
        return 76;
    }

    public static int CanTalonSRX_eEncPosition_get() {
        return 77;
    }

    public static int CanTalonSRX_eEncVel_get() {
        return 78;
    }

    public static int CanTalonSRX_eEncIndexRiseEvents_get() {
        return 79;
    }

    public static int CanTalonSRX_eQuadApin_get() {
        return 80;
    }

    public static int CanTalonSRX_eQuadBpin_get() {
        return 81;
    }

    public static int CanTalonSRX_eQuadIdxpin_get() {
        return 82;
    }

    public static int CanTalonSRX_eAnalogInWithOv_get() {
        return 83;
    }

    public static int CanTalonSRX_eAnalogInVel_get() {
        return 84;
    }

    public static int CanTalonSRX_eTemp_get() {
        return 85;
    }

    public static int CanTalonSRX_eBatteryV_get() {
        return 86;
    }

    public static int CanTalonSRX_eResetCount_get() {
        return 87;
    }

    public static int CanTalonSRX_eResetFlags_get() {
        return 88;
    }

    public static int CanTalonSRX_eFirmVers_get() {
        return 89;
    }

    public static int CanTalonSRX_eSettingsChanged_get() {
        return 90;
    }

    public static int CanTalonSRX_eQuadFilterEn_get() {
        return 91;
    }

    public static int CanTalonSRX_ePidIaccum_get() {
        return 93;
    }

    public static long CanTalonSRX_SetParam(long id, CanTalonSRX srx_impl, int param, double val) {
        SRX_Reg.wrappers.get(id).params.put(param, val);
        return 0;
    }

    public static long CanTalonSRX_RequestParam(long id, CanTalonSRX srx_impl, int param) {
        return dtl(SRX_Reg.wrappers.get(id).params.get(param));
    }

    public static long CanTalonSRX_GetParamResponse(long devid, CanTalonSRX srx_impl, int param, long dp) {
        double_p_assoc.put(dp, SRX_Reg.wrappers.get(devid).params.get(param));
        return dp;
    }

    public static long CanTalonSRX_GetParamResponseInt32(long devid, CanTalonSRX srx_impl, int param, long ip) {
        int_p_assoc.put(ip, SRX_Reg.wrappers.get(devid).params.get(param).intValue());
        return ip;
    }

    // PID Closed Loop is not currently supported by simulation
    // TODO

    public static long CanTalonSRX_SetPgain(long devid, CanTalonSRX srx_impl, long slotIdx, double gain) {
        SRX_Reg.wrappers.get(devid).setGains((int)slotIdx, 0, gain);
        return 0;
    }

    public static long CanTalonSRX_SetIgain(long devid, CanTalonSRX srx_impl, long slotIdx, double gain) {
        SRX_Reg.wrappers.get(devid).setGains((int)slotIdx, 1, gain);
        return 0;
    }

    public static long CanTalonSRX_SetDgain(long devid, CanTalonSRX srx_impl, long slotIdx, double gain) {
        SRX_Reg.wrappers.get(devid).setGains((int)slotIdx, 2, gain);
        return 0;
    }

    public static long CanTalonSRX_SetFgain(long devid, CanTalonSRX srx_impl, long slotIdx, double gain) {
        SRX_Reg.wrappers.get(devid).setGains((int)slotIdx, 3, gain);
        return 0;
    }

    public static long CanTalonSRX_SetIzone(long devid, CanTalonSRX srx_impl, long slotIdx, int zone) {
        return 0;
    }

    public static long CanTalonSRX_SetCloseLoopRampRate(long devid, CanTalonSRX srx_impl, long slotIdx, int closeLoopRampRate) {
        return 0;
    }

    public static long CanTalonSRX_SetSensorPosition(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetForwardSoftLimit(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetReverseSoftLimit(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetForwardSoftEnable(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetReverseSoftEnable(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetPgain(long devid, CanTalonSRX srx_impl, long slotID, long gain_ID) {
        double_p_assoc.put(gain_ID, SRX_Reg.wrappers.get(devid).gains[((int) slotID)][0]);
        return 0;
    }

    public static long CanTalonSRX_GetIgain(long devid, CanTalonSRX srx_impl, long slotID, long gain_ID) {
        double_p_assoc.put(gain_ID, SRX_Reg.wrappers.get(devid).gains[((int) slotID)][1]);
        return 0;
    }

    public static long CanTalonSRX_GetDgain(long devid, CanTalonSRX srx_impl, long slotID, long gain_ID) {
        double_p_assoc.put(gain_ID, SRX_Reg.wrappers.get(devid).gains[((int) slotID)][2]);
        return 0;
    }

    public static long CanTalonSRX_GetFgain(long devid, CanTalonSRX srx_impl, long slotID, long gain_ID) {
        double_p_assoc.put(gain_ID, SRX_Reg.wrappers.get(devid).gains[((int) slotID)][3]);
        return 0;
    }

    public static long CanTalonSRX_GetIzone(long devid, CanTalonSRX srx_impl, long slotID, long gain_ID) {
        return 0;
    }

    public static long CanTalonSRX_GetCloseLoopRampRate(long devid, CanTalonSRX srx_impl, long jarg2, long jarg3) {
        return 0;
    }

    public static long CanTalonSRX_GetForwardSoftLimit(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetReverseSoftLimit(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetForwardSoftEnable(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetReverseSoftEnable(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetStatusFrameRate(long devid, CanTalonSRX srx_impl, long jarg2, long jarg3) {
        return 0;
    }

    // Faults not required
    public static long CanTalonSRX_ClearStickyFaults(long devid, CanTalonSRX srx_impl) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_OverTemp(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_UnderVoltage(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_ForLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_RevLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_HardwareFailure(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_ForSoftLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetFault_RevSoftLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_OverTemp(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_UnderVoltage(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_ForLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_RevLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_ForSoftLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetStckyFault_RevSoftLim(long devid, CanTalonSRX srx_impl, long accessor) {
        return 0;
    }

    public static long CanTalonSRX_GetAppliedThrottle(long devid, CanTalonSRX srx_impl, long int_p_id) {
        // %Vbus
        int_p_assoc.put(int_p_id, (int) (SRX_Reg.wrappers.get(devid).pvbus * 1023));
        return 0;
    }

    public static long CanTalonSRX_GetCloseLoopErr(long devid, CanTalonSRX srx_impl, long int_p_id) {
        return 0;
    }

//    public static native long CanTalonSRX_GetFeedbackDeviceSelect(long devid, CanTalonSRX srx_impl, long jarg2);

    public static long CanTalonSRX_GetModeSelect(long devid, CanTalonSRX srx_impl, long int_p_id) {
        int_p_assoc.put(int_p_id, SRX_Reg.wrappers.get(devid).mode);
        return 0;
    }

    //    public static native long CanTalonSRX_GetLimitSwitchEn(long devid, CanTalonSRX srx_impl, long jarg2);
    public static long CanTalonSRX_GetLimitSwitchClosedFor(long devid, CanTalonSRX srx_impl, long pntr) {
        int_p_assoc.put(pntr, 1);
        return 0;
    }

    public static long CanTalonSRX_GetLimitSwitchClosedRev(long devid, CanTalonSRX srx_impl, long pntr) {
        int_p_assoc.put(pntr, 1);
        return 0;
    }

    public static long CanTalonSRX_GetSensorPosition(long devid, CanTalonSRX srx_impl, long pntr) {
        int_p_assoc.put(pntr, SRX_Reg.wrappers.get(devid).position);
        return 0;
    }

    public static long CanTalonSRX_GetSensorVelocity(long devid, CanTalonSRX srx_impl, long pntr) {
        int_p_assoc.put(pntr, SRX_Reg.wrappers.get(devid).speed);
        return 0;
    }

    public static long CanTalonSRX_GetCurrent(long devid, CanTalonSRX srx_impl, long pntr) {
        double_p_assoc.put(pntr, 10.0);         // I mean, I guess we can have an Amperage?
        return 0;
    }

    public static long CanTalonSRX_GetBrakeIsEnabled(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    // TODO: Encoder methods. Not quite sure what to return here
    public static long CanTalonSRX_GetEncPosition(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetEncVel(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetEncIndexRiseEvents(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetQuadApin(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetQuadBpin(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetQuadIdxpin(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetAnalogInWithOv(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetAnalogInVel(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetTemp(long devid, CanTalonSRX srx_impl, long pntr) {
        double_p_assoc.put(pntr, 20.0);             // A comfortable 20C :D
        return 0;
    }

    public static long CanTalonSRX_GetBatteryV(long devid, CanTalonSRX srx_impl, long pntr) {
        double_p_assoc.put(pntr, 12.0);
        return 0;
    }

    public static long CanTalonSRX_GetResetCount(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetResetFlags(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_GetFirmVers(long devid, CanTalonSRX srx_impl, long jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetDemand(long devid, CanTalonSRX srx_impl, int demand) {
        SRX_Reg.wrappers.get(devid).setDemand(demand);
        return 0;
    }

    public static long CanTalonSRX_SetOverrideLimitSwitchEn(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetFeedbackDeviceSelect(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetRevMotDuringCloseLoopEn(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetOverrideBrakeType(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetModeSelect(long devid, CanTalonSRX srx_impl, int modeid) {
        SRX_Reg.wrappers.get(devid).setMode(modeid);
        return 0;
    }

    public static long CanTalonSRX_SetProfileSlotSelect(long devid, CanTalonSRX srx_impl, int slotID) {
        SRX_Reg.wrappers.get(devid).setSlotID(slotID);
        return 0;
    }

    public static long CanTalonSRX_SetRampThrottle(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SetRevFeedbackSensor(long devid, CanTalonSRX srx_impl, int jarg2) {
        return 0;
    }

    public static long CanTalonSRX_SWIGUpcast(long jarg1) {
        return jarg1;
    }
}
